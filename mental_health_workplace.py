# -*- coding: utf-8 -*-
"""Mental_Health_Workplace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dS7-WSu5ZwiRLRm2mWRtPYpC81AmLDGj

📊 **Mental Health in the Workplace - EDA Project**
## A Data Analyst's Exploration into Employee Well-being

Welcome! In this notebook, we explore a dataset focused on **mental health in workplace environments**.  
As data analysts, it's our goal to uncover insights that can help **companies foster healthier, more supportive workspaces**.

# 1. استيراد البيانات وفهم هيكلها - Data Loading & Structure
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

df = pd.read_csv('/content/mental_health0.csv' , sep=";" )
df.head().T

df.info()
df.shape

# التحقق من القيم المفقودة والمكررة

missing_values = df.isnull().sum()
duplicated_rows = df.duplicated().sum()

print(" عدد القيم المفقودة في كل عمود:")
print(missing_values)

print("\n عدد الصفوف المكررة في البيانات:")
print(duplicated_rows)

"""# 2. تنظيف البيانات وتجهيزها - Data Cleaning & Preparation






"""

# تعويض القيمه النصية الناقصة بالقيمة الأكثر تكرارًا
df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)
# تعويض بالمتوسط
df['SleepHours'].fillna(df['SleepHours'].mean(), inplace=True)
# تعويض بالوسيط
df['CareerGrowthScore'].fillna(df['CareerGrowthScore'].median(), inplace=True)

# حذف الصفوف المكررة
df.drop_duplicates(inplace=True)
print(": بعد التنظيف، القيم المفقودة في كل عمود ")
print(df.isnull().sum())
print(": بعد التنظيف، القيم المكرره في كل صف ")
print(df.duplicated().sum())

"""# 3.  التحليل الوصفي - Descriptive Analysis

"""

# وصف إحصائي للبيانات الرقمية (mean, median, std)
df.drop(columns=['EmployeeID']).describe().T

# تحليل تكراري
import matplotlib.pyplot as plt
import numpy as np

# اختر عمودين فقط
key_columns = ['Department', 'SalaryRange']

# إنشاء 1 صف × 2 أعمدة
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

for i, col in enumerate(key_columns):
    counts = df[col].value_counts(dropna=False)
    sizes = counts.values
    labels = counts.index
    total = sizes.sum()

    # رسم الدائرة
    wedges, _ = axes[i].pie(
        sizes,
        labels=None,
        startangle=90,
        colors=plt.cm.Pastel2.colors
    )

    # النسبة المئوية + اسم الفئة
    for j, wedge in enumerate(wedges):
        angle = (wedge.theta2 + wedge.theta1) / 2
        x = np.cos(np.deg2rad(angle)) * 1.2
        y = np.sin(np.deg2rad(angle)) * 1.2
        pct = f'{(sizes[j]/total)*100:.1f}%'
        axes[i].text(x, y, pct, ha='center', va='bottom', fontsize=9, color='Blue')
        axes[i].text(x, y - 0.1, str(labels[j]), ha='center', va='top', fontsize=8, color='black')

    axes[i].set_title(col, fontsize=12)

plt.suptitle('Key Feature Distributions (Pie Charts)', fontsize=14)
plt.tight_layout(rect=[0, 0, 1, 0.93])
plt.show()

#   تحليل البيانات للمتغيرات المستمرة (Categorical Variables)
# توزيع ساعات النوم، ساعات العمل،
continuous_cols = ['SleepHours', 'WorkHoursPerWeek']

plt.figure(figsize=(16, 4))
for i, col in enumerate(continuous_cols):
    plt.subplot(1, 3, i+1)
    df[col].hist(bins=20, color='steelblue', edgecolor='black')
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Count')
plt.tight_layout()
plt.show()

"""# 4.  التحليل الاستكشافي - Exploratory Data Analysis

"""

# تصفية شرطية للإستكشاف
# and
filtered1 = df[(df["JobRole"] == "IT Admin") & (df["HasMentalHealthSupport"] == "Yes") & (df["BurnoutLevel"] >= 7)]
print(f"\n عدد الصفوف التي تطابق الشروط: {len(filtered1)}")
# or
filtered2 =df[(df["HasMentalHealthSupport"] == "Yes") | (df["HasTherapyAccess"] == "Yes")]
print(f"\n عدد الصفوف التي تطابق الشروط: {len(filtered2)}")

# التحقق من القيم المتطرفة
numeric_df = df.drop(columns=["EmployeeID"]).select_dtypes(include=['int64', 'float64'])
plt.figure(figsize=(14, 6))
sns.boxplot(data=numeric_df)
plt.title("Outliers")
plt.xticks(rotation=45)
plt.show()

# 1. التحليل الصحي والنفسي
health_df = df[[
    'SleepHours',
    'PhysicalActivityHrs',
    'StressLevel',
    'BurnoutLevel',
    'HasTherapyAccess',
    'HasMentalHealthSupport',
    'MentalHealthDaysOff'
]].copy()

# تحويل النصوص إلى أرقام
health_df['HasTherapyAccess'] = health_df['HasTherapyAccess'].map({'Yes': 1, 'No': 0})
health_df['HasMentalHealthSupport'] = health_df['HasMentalHealthSupport'].map({'Yes': 1, 'No': 0})

# حساب مصفوفة الارتباط
corr_matrix = health_df.corr()

# رسم Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='PuBu', center=0, fmt=".2f", linewidths=0.5)
plt.title('Correlation Between Health & Mental Wellness Features')
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

#  2.تحليل الإنتاجيه والاداء
# تصنيف Manager Support إلى فئات: Low, Medium, High
df['ManagerSupportLevel'] = pd.cut(df['ManagerSupportScore'],
                                   bins=[0, 4, 7, 10],
                                   labels=['Low', 'Medium', 'High'])

# تصنيف Career Growth إلى فئات
df['CareerGrowthLevel'] = pd.cut(df['CareerGrowthScore'],
                                 bins=[0, 4, 7, 10],
                                 labels=['Low', 'Medium', 'High'])
# دمج الفئتين في عمود واحد
df['Support_and_Growth'] = df['ManagerSupportLevel'].astype(str) + ' / ' + df['CareerGrowthLevel'].astype(str)

# حذف الصفوف التي فيها قيم مفقودة بعد التصنيف
plot_df = df.dropna(subset=['Support_and_Growth', 'JobSatisfaction'])

# رسم Boxplot
plt.figure(figsize=(12, 6))
sns.boxplot(data=plot_df,
            x='Support_and_Growth',
            y='JobSatisfaction',
            palette='coolwarm')

# تنسيقات العنوان والمحاور
plt.title('Job Satisfaction Based on Manager Support and Career Growth', fontsize=14)
plt.xlabel('Manager Support / Career Growth')
plt.ylabel('Job Satisfaction')
plt.xticks(rotation=45)
plt.grid(True, linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

"""# 5.  التحليل الإحصائي - Statistical Analysis

"""

# 3. تحليل بيئة العمل والراحه
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# تحويل القيم إلى فئات
def categorize_stress(stress):
    if stress <= 3:
        return 'Low'
    elif 4 <= stress <= 7:
        return 'Medium'
    else:
        return 'High'

def categorize_work_life_balance(balance):
    if balance <= 3:
        return 'Low'
    elif 4 <= balance <= 7:
        return 'Medium'
    else:
        return 'High'

# تطبيق الفئات على الأعمدة
df['StressCategory'] = df['StressLevel'].apply(categorize_stress)
df['WorkLifeBalanceCategory'] = df['WorkLifeBalanceScore'].apply(categorize_work_life_balance)

# إعداد الشكل لاحتواء الرسمين بشكل منفصل
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# رسم Count Plot لعرض التوتر حسب نوع الوظيفة (رسم أول)
sns.countplot(x='JobRole', hue='StressCategory', data=df, ax=axes[0], palette="coolwarm")
axes[0].set_title('Stress Level by Job Role', fontsize=16)
axes[0].set_xlabel('Job Role', fontsize=12)
axes[0].set_ylabel('Count', fontsize=12)
axes[0].tick_params(axis='x', rotation=45)

# رسم Count Plot لعرض توازن الحياة والعمل حسب نوع الوظيفة (رسم ثاني)
sns.countplot(x='JobRole', hue='WorkLifeBalanceCategory', data=df, ax=axes[1], palette="YlGnBu")
axes[1].set_title('Work Life Balance by Job Role', fontsize=16)
axes[1].set_xlabel('Job Role', fontsize=12)
axes[1].set_ylabel('Count', fontsize=12)
axes[1].tick_params(axis='x', rotation=45)

# ضبط المسافات بين الرسمين
plt.tight_layout()

# عرض الرسم
plt.show()

# 4. تحليل السمات الوظيفيه ومدى تاثيرها
#تقسيم العمر والخبره الى فئات
df['AgeGroup'] = pd.cut(df['Age'], bins=[18, 25, 35, 45, 60], labels=['18-25', '25-35', '36-45', '46-60'])
df['ExperienceGroup'] = pd.cut(df['YearsAtCompany'], bins=[0, 2, 5, 10, 50], labels=['0-2', '3-5', '6-10', '+10'])

# تحويل الأعمدة الرقمية إلى نصوص قبل دمجها
df['WorkProfile'] = (
    df['Gender'].astype(str) + ' | ' +
    df['AgeGroup'].astype(str) + ' | ' +
    df['SalaryRange'].astype(str) + ' | ' +
    df['ExperienceGroup'].astype(str) + ' | ' +
    df['Department'].astype(str)
)

# حساب متوسط الإرهاق والرضا الوظيفي لكل بروفايل
profile_summary = df.groupby('WorkProfile')[['BurnoutLevel', 'JobSatisfaction']].mean().round(2)

# استخراج أعلى 20 بروفايل من حيث الإرهاق
top_profiles_df = profile_summary.sort_values(by='BurnoutLevel', ascending=False).head(20).reset_index()

# فصل WorkProfile إلى أعمدة منفصلة
profile_parts = top_profiles_df['WorkProfile'].str.split(' \| ', expand=True)
profile_parts.columns = ['Gender', 'AgeGroup', 'SalaryRange', 'ExperienceGroup', 'Department']

# دمج التفاصيل مع القيم
top_profiles_df = pd.concat([profile_parts, top_profiles_df[['BurnoutLevel', 'JobSatisfaction']]], axis=1)

# إضافة عمود لتسهيل قراءه البروفايلات'Person'
top_profiles_df['Person'] = ['Person ' + str(i) for i in range(1, len(top_profiles_df) + 1)]
cols = ['Person'] + [col for col in top_profiles_df.columns if col != 'Person']
top_profiles_df = top_profiles_df[cols]

# عرض النتائج النهائية
print(f" أعلى {len(top_profiles_df)} بروفايلات من حيث مستوى الإرهاق مع مستوى الرضا الوظيفي:\n")
print(top_profiles_df.to_string(index=False))


plt.figure(figsize=(12, 9))  # قللت العرض شوية والارتفاع زدته ليتناسب مع عدد الأشخاص

# نقاط الإرهاق باستخدام أسماء الأشخاص
sns.scatterplot(
    data=top_profiles_df,
    x='BurnoutLevel',
    y='Person',
    s=150,
    color='red',
    label='Burnout Level'
)

# نقاط الرضا باستخدام أسماء الأشخاص
sns.scatterplot(
    data=top_profiles_df,
    x='JobSatisfaction',
    y='Person',
    s=150,
    color='blue',
    label='Job Satisfaction'
)

# خطوط ربط بين النقطتين لكل شخص
for _, row in top_profiles_df.iterrows():
    plt.plot([row['JobSatisfaction'], row['BurnoutLevel']],
             [row['Person'], row['Person']],
             color='gray', linestyle='--', alpha=0.5)

plt.title(f'Burnout vs Job Satisfaction for Top {len(top_profiles_df)} Exhausted Work Profiles', fontsize=16)
plt.xlabel('Score')
plt.ylabel('Person')
plt.legend()
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.xlim(0, 10)

plt.tight_layout(pad=0)

plt.show()

"""# 6.  التصور البياني - Data Visualization

"""

def categorize_support(score):
    if score <= 3:
        return 'Low'
    elif score <= 7:
        return 'Medium'
    else:
        return 'High'

df['ManagerSupportLevel'] = df['ManagerSupportScore'].apply(categorize_support)

pivot_table = df.groupby(['HasMentalHealthSupport', 'ManagerSupportLevel'])['BurnoutLevel'].mean().reset_index()

# حساب الرباعيات للمتوسطات
q1 = pivot_table['BurnoutLevel'].quantile(0.25)
q3 = pivot_table['BurnoutLevel'].quantile(0.75)

def categorize_burnout_quantiles(avg_score):
    if avg_score <= q1:
        return 'Low'
    elif avg_score <= q3:
        return 'Medium'
    else:
        return 'High'

pivot_table['BurnoutCategory'] = pivot_table['BurnoutLevel'].apply(categorize_burnout_quantiles)

pivot_pivot = pivot_table.pivot(index='HasMentalHealthSupport', columns='ManagerSupportLevel', values='BurnoutCategory')

category_to_num = {'Low': 0, 'Medium': 1, 'High': 2}
pivot_numeric = pivot_table.copy()
pivot_numeric['BurnoutNum'] = pivot_numeric['BurnoutCategory'].map(category_to_num)
pivot_numeric_pivot = pivot_numeric.pivot(index='HasMentalHealthSupport', columns='ManagerSupportLevel', values='BurnoutNum')

plt.figure(figsize=(8, 5))
sns.heatmap(pivot_numeric_pivot, annot=pivot_pivot, fmt='', cmap='YlGnBu', linewidths=0.5, cbar_kws={'label': 'Burnout Category (0=Low,2=High)'})

plt.title('Impact of Mental Health Support & Manager Support on Burnout Categories', fontsize=14)
plt.xlabel('Manager Support Level')
plt.ylabel('Has Mental Health Support')
plt.yticks([0.5, 1.5], ['No', 'Yes'], rotation=0)
plt.tight_layout()
plt.show()

# حساب المتوسط لكل دولة
burnout_by_country = df.groupby("Country")["BurnoutLevel"].mean().reset_index()
burnout_by_country.columns = ['Country', 'AverageBurnout']

# تقسيم Burnout إلى 6 فئات حسب التوزيع (Quantiles)
quantile_bins = pd.qcut(
    burnout_by_country['AverageBurnout'],
    q=6,
    labels=["Very Low", "Low", "Moderate", "Medium High", "High", "Very High"]
)

burnout_by_country["BurnoutCategory"] = quantile_bins

# ألوان مناسبة لكل فئة
category_colors = {
    "Very Low": "#c6dbef",
    "Low": "#9ecae1",
    "Moderate": "#6baed6",
    "Medium High": "#4292c6",
    "High": "#2171b5",
    "Very High": "#084594"
}

# رسم الخريطة التفاعلية
fig = px.choropleth(
    burnout_by_country,
    locations="Country",
    locationmode="country names",
    color="BurnoutCategory",
    color_discrete_map=category_colors,
    hover_name="Country"
)

# ضبط التصميم
fig.update_layout(
    geo=dict(
        showframe=False,
        projection_type='natural earth'
    ),
    title=dict(
        text="Burnout Levels by Country (Quantile-Based Categories)",
        x=0.5,
        y=0.92,
        xanchor='center',
        yanchor='top',
        font=dict(size=18)
    ),
    legend_title="Burnout Category",
    legend=dict(
        orientation="v",
        x=0.62,             # أقرب أكثر لداخل الخريطة
        xanchor="left",
        y=0.98,
        yanchor="top",
        bgcolor="rgba(255,255,255,0.7)",
        bordercolor="black",
        borderwidth=1
    ),
    margin=dict(t=60, l=0, r=0, b=0)
)

fig.show()

"""# 7.  الخاتمة والتوصيات - Conclusion & Recommendations

**قدم هذا التحليل رؤى أساسية حول الصحة النفسية في العمل، مبرزًا:**
* ارتباطًا مباشرًا بين التوتر والإرهاق.
* أهمية دعم المدير والنمو المهني للرضا الوظيفي.
* تباين الرضا رغم الإرهاق الشديد، وتأثير السمات الوظيفية.
* اختلاف مستويات الإرهاق وتوازن العمل/الحياة بين الأدوار والمواقع الجغرافية.

**بناءً عليه، نوصي بـ:**
1.  معالجة التوتر والإرهاق بفاعلية.
2.  تعزيز دعم المديرين ومسارات النمو.
3.  تحسين بيئات العمل عالية الضغط.
4.  فهم عوامل الرضا التي توازن الإرهاق.
5.  تخصيص استراتيجيات الدعم حسب الدول.

**الخطوات التالية: تحليل أعمق لبناء نماذج تنبؤية.**
"""